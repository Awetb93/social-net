{"version":3,"sources":["components/DisplayComment.jsx","components/Comments.jsx","components/Post.jsx","components/home.jsx","components/profile.jsx","utils/localStorage.js","components/SignIn.jsx","components/SignUp.jsx","utils/headers.js","components/List.jsx","components/Signout.jsx","components/header.jsx","App.js","index.js"],"names":["DisplayComment","comments","history","useHistory","renderComment","map","comment","index","className","Avatar","onClick","push","user","id","style","cursor","name","split","marginLeft","Moment","parseInt","createdAt","fromNow","likeMutation","gql","addCommentMutation","Comments","state","useState","toggle","setToggle","setComment","useMutation","addComment","addLike","CardActions","IconButton","variables","like","postid","refetchQueries","query","getdata","likes","length","Badge","badgeContent","owner","color","TextField","onChange","e","target","value","required","width","placeholder","Button","Post","renderPost","posts","me","deletePost","post","Grid","container","item","md","sm","Card","marginTop","variant","CardHeader","subheader","CardContent","picUrl","src","height","alt","picName","AddPostMutation","Home","methods","useForm","data","useQuery","onCompleted","reset","addPost","control","handleSubmit","register","JSON","parse","localStorage","getItem","onSubmit","val","file","pic","as","label","defaultValue","accept","type","ref","hidden","htmlFor","aria-label","component","xs","GetData","followMutation","unfollowUserMutation","deletePostMutation","Profile","showAction","useParams","following","unfollow","isme","followed","filter","follow","toString","local","removeItem","setItem","stringify","SignInMutation","SignIn","dispatch","useContext","context","errorPolicy","signIn","loc","payload","error","margin","elevation","Typography","textAlign","Alert","graphQLErrors","i","message","SignUpMutation","SignUp","console","log","signUp","flexGrow","Headers","exact","path","Signup","useStyles","makeStyles","theme","root","maxWidth","backgroundColor","palette","background","paper","SimpleList","renderedList","items","onclick","classes","search","ListItem","button","ListItemText","primary","List","mutation","SignOut","userId","deleteLocal","sigOut","SearchQuery","term","setTerm","useLazyQuery","res","useEffect","timeId","setTimeout","clearTimeout","InputBase","size","to","uploadlink","createUploadLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","reducer","action","isSignIn","createContext","App","useReducer","Provider","StylesProvider","injectFirst","CssBaseline","Container","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bc1c379.chunk.js","sourcesContent":["import {useHistory} from \"react-router-dom\"\r\nimport { Avatar } from \"@material-ui/core\"\r\nimport Moment from \"moment\"\r\nexport default function DisplayComment({ comments }) {\r\n   const history=useHistory()\r\n    const renderComment = comments.map((comment, index) => {\r\n        return(\r\n            <div key={index}>\r\n                <div className=\"comment\">\r\n<Avatar onClick={() => { history.push(`profile/${comment.user.id}`) }} style={{ cursor: \"pointer\" }}>{comment.user.name.split(\" \")[0].split(\"\")[0]}</Avatar> \r\n          <p style={{marginLeft:\"5px\"}}>{Moment(parseInt(comment.createdAt)).fromNow()} </p> \r\n                </div>\r\n                <div className=\"comment-content\">\r\n                  <p>{comment.comment}  </p>\r\n            </div>\r\n             \r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n           {renderComment}      \r\n        </div>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport { IconButton,Badge,CardActions, TextField,Button, Avatar } from \"@material-ui/core\"\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport {gql,useMutation} from \"@apollo/client\"\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport{getdata} from \"./home\"\r\nimport DisplayComment from './DisplayComment';\r\n\r\nconst likeMutation = gql`\r\nmutation($like:Boolean!,$postid:ID!){\r\n  addLike(like:$like,postid:$postid){\r\n    owner\r\n  }\r\n}\r\n`\r\nconst addCommentMutation = gql`\r\nmutation($comment:String!,$postid:ID!){\r\n addComment(comment:$comment,postid:$postid){\r\n    comment,id\r\n  }\r\n}\r\n\r\n`\r\nexport default function Comments({ state }) {\r\n    const [toggle, setToggle] = useState(false)\r\n    const [comment, setComment] = useState(\"\")\r\n    const[addComment]=useMutation(addCommentMutation)\r\n     const [addLike] = useMutation(likeMutation)\r\n     \r\n     const addLikess = (id) => {\r\n           addLike({ variables: { like: true, postid: id }, refetchQueries: [{ query: getdata }] })\r\n    }\r\n    const submit = (id) => {\r\n        addComment({variables:{comment,postid:id},refetchQueries:[{query:getdata}]})\r\n        setComment(\"\")\r\n    }\r\n    return (\r\n        <> \r\n            <CardActions>\r\n            <IconButton onClick={()=>addLikess(state.id)} >\r\n             {state.likes.length>0 ? (<Badge badgeContent={state.likes[0].owner.length} color=\"secondary\"></Badge>) : null}  \r\n             <FavoriteIcon />\r\n            </IconButton>\r\n        <IconButton onClick={()=>setToggle(!toggle)}>\r\n        <Badge badgeContent={state.comments.length} color=\"secondary\"/>\r\n        <CommentIcon/>\r\n                </IconButton>\r\n            </CardActions>\r\n           \r\n            <div>\r\n                {toggle && (<>\r\n                    <hr />\r\n                    <div className=\"edit-commont\">\r\n                <Avatar >{state.user.name.split(\" \")[0].split(\"\")[0]}</Avatar>\r\n                        <TextField onChange={(e) => setComment(e.target.value)} value={comment} required style={{width:\"90%\"}} placeholder=\"write a comment ...\"/>\r\n                    </div>\r\n                    <Button onClick={()=>submit(state.id)} style={{marginLeft:\"50%\"}}>Submit</Button>\r\n            <Button onClick={() => { setToggle(!toggle); setToggle(\"\") }}>concel</Button>\r\n            <DisplayComment comments={state.comments }/>\r\n          </>\r\n            \r\n                )}\r\n                \r\n            </div>\r\n           \r\n            </>\r\n    )\r\n}\r\n","import { CardHeader, Card, CardContent, Avatar ,IconButton, Grid} from \"@material-ui/core\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\r\nimport {useHistory} from \"react-router-dom\"\r\nimport Comment from  \"./Comments\"\r\nimport Moment from \"moment\"\r\nexport default function Post({ posts ,me,deletePost}) {\r\n    const history = useHistory()\r\n    let renderPost;\r\n    if (posts) {\r\n        \r\n        renderPost = posts.posts.map(post => {\r\n            return (\r\n               <div key={post.id}>\r\n                    { me === true ? (<Grid container key={post.id} className=\"admin-list\">\r\n                        <Grid item md={11} sm={11}  style={{width:\"80%\"}}>\r\n<Card style={{ marginTop: \"10px\"}} variant=\"outlined\">\r\n                    <div className=\"comment\">\r\n                    <Avatar onClick={() =>history.push(`/profile/${post.user.id}`) } style={{cursor:\"pointer\"}}>{post.user.name.split(\" \")[0].split(\"\")[0]}</Avatar>\r\n                    <CardHeader subheader={Moment(parseInt(post.createdAt)).fromNow()} />\r\n                   </div>\r\n                    <CardContent>\r\n                        <div>\r\n                         {post.post}   \r\n                        </div>\r\n                        {post.picUrl && (<div>\r\n                            <img src={post.picUrl} style={{width:\"60%\",height:\"50%\"}} alt={post.picName} />\r\n                        </div>)}\r\n                    \r\n                    </CardContent>\r\n                     \r\n                    <Comment state={ post} />\r\n                        </Card>\r\n                        </Grid>\r\n                        <Grid item sm={1} md={1}>\r\n                         <IconButton onClick={()=>deletePost(post.id)}>\r\n                          <HighlightOffIcon color=\"secondary\"/>  \r\n                 </IconButton>   \r\n                    </Grid>\r\n               \r\n                    </Grid>) : (\r\n                          \r\n                            \r\n                            \r\n                        <Card style={{ marginTop: \"10px\" }} variant=\"outlined\">\r\n                    <div className=\"comment\">\r\n                    <Avatar onClick={() =>history.push(`/profile/${post.user.id}`) } style={{cursor:\"pointer\"}}>{post.user.name.split(\" \")[0].split(\"\")[0]}</Avatar>\r\n                    <CardHeader subheader={Moment(parseInt(post.createdAt)).fromNow()} />\r\n                   </div>\r\n                    <CardContent>\r\n                        <div>\r\n                         {post.post}   \r\n                        </div>\r\n                        {post.picUrl && (<div>\r\n                            <img src={post.picUrl} style={{width:\"60%\",height:\"50%\"}} alt={post.picName} />\r\n                        </div>)}\r\n                    \r\n                    </CardContent>\r\n                     \r\n                    <Comment state={ post} />\r\n                    </Card>)}\r\n                </div>\r\n            \r\n            )\r\n        })\r\n        \r\n    }\r\n    return (\r\n        <div>\r\n          {renderPost}\r\n        </div>\r\n    )\r\n}\r\n","import { Grid, TextField, Button, IconButton, } from \"@material-ui/core\";\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { Controller, useForm } from \"react-hook-form\"\r\nimport { gql, useQuery, useMutation } from \"@apollo/client\"\r\n\r\nimport Post from \"./Post\";\r\nexport const getdata = gql`{\r\n  posts{\r\n    post  picUrl,picName createdAt id user{\r\n      name,id \r\n    }\r\n    comments{\r\n        comment createdAt user{\r\n          name id\r\n        }\r\n      }\r\n       likes{\r\n      owner\r\n    }\r\n  }\r\n}`\r\n\r\nconst AddPostMutation = gql`\r\nmutation($post:String,$file:Upload){\r\n    addPost(post:$post,file:$file){\r\n    post\r\n  }\r\n}\r\n`\r\nexport default function Home() {\r\n  const methods = useForm()\r\n  const { data} = useQuery(getdata)\r\n  const[addPost]=useMutation(AddPostMutation,{onCompleted(data){reset()}})\r\n  const {control,handleSubmit,reset,register}=methods\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const onsubmit = val => {\r\n      const file=val.pic[0]\r\n      addPost({ variables: {post:val.post,file },refetchQueries:[{query:getdata}] })\r\n  \r\n  }\r\n\r\n    return (\r\n        <>\r\n       <Grid  container style={{marginTop:\"20px\"}} >\r\n              <Grid item sm={4}></Grid>\r\n                <Grid item sm={6}>\r\n                    <form onSubmit={handleSubmit(onsubmit)}>\r\n                        <div className=\"profile-circle\">\r\n                           {user.name[0]} \r\n                        </div>\r\n              <Controller as={TextField} label={`what is in your mind ${user.name}?`} variant=\"outlined\" control={control} name=\"post\" defaultValue=\"\" style={{ width: \"100%\" }} />\r\n             <input accept=\"image/*\"  id=\"icon-button-file\" name=\"pic\" type=\"file\" ref={register} hidden/>\r\n      <label htmlFor=\"icon-button-file\">\r\n        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n          <AddAPhotoIcon />\r\n        </IconButton>\r\n      </label>     \r\n         <Button style={{marginLeft:\"60%\"}} className=\"btn\" type=\"submit\">Post</Button>\r\n                      \r\n                    </form>\r\n              </Grid>\r\n              <Grid item sm={2}></Grid>\r\n            </Grid>\r\n            \r\n        <Grid  container style={{marginTop:\"20px\"}} >\r\n                <Grid item sm={4}></Grid>\r\n          <Grid item container xs={12} sm={6}>\r\n            <Post posts={data}/></Grid>\r\n                  <Grid item sm={2}></Grid>\r\n            </Grid>\r\n            </>\r\n    )\r\n}\r\n","import { useParams,} from \"react-router-dom\"\r\nimport { useQuery, gql, useMutation } from \"@apollo/client\"\r\nimport{getdata} from \"./home\"\r\nimport { Button, Grid } from \"@material-ui/core\"\r\nimport  Post from \"./Post\"\r\nconst GetData = gql`\r\n    query($id:ID!){\r\n        user(id:$id){\r\n        followed\r\n         posts{\r\n    post  picUrl,picName createdAt id user{\r\n      name,id \r\n    }\r\n    comments{\r\n        comment createdAt user{\r\n          name id\r\n        }\r\n      }\r\n       likes{\r\n      owner\r\n    }\r\n  }   \r\n        }\r\n    }\r\n\r\n`\r\nconst followMutation = gql`\r\nmutation($id:ID!){\r\n  following(id:$id){\r\n    id\r\n  }\r\n}\r\n`\r\nconst unfollowUserMutation = gql`\r\nmutation($id:ID!){\r\n  unfollow(id:$id){\r\n    id\r\n  }\r\n}\r\n`\r\nconst deletePostMutation = gql`\r\n  mutation($id:ID!){\r\n    deletePost(id:$id){\r\n      id\r\n    }\r\n  }\r\n`\r\nexport default function Profile() {\r\n  const { id } = useParams()\r\n  const { data } = useQuery(GetData, { variables: { id } })\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const[following]=useMutation(followMutation)\r\n  const [unfollow] = useMutation(unfollowUserMutation)\r\n  const [deletePost] = useMutation(deletePostMutation)\r\n  let isme = user.id === id\r\n  const handleDelete = (val) => {\r\n    deletePost({variables:{id:val},refetchQueries:[{query:GetData,variables:{id}},{query:getdata}]})\r\n  }\r\n\r\n  const followUser = () => {\r\n    following({ variables: { id }, refetchQueries: [{ query: GetData,variables:{id} }] })\r\n  }\r\n   const unfollowUser = () => {\r\n    unfollow({ variables: { id }, refetchQueries: [{ query: GetData,variables:{id} }] })\r\n  }\r\n  let showAction;\r\n  if (data) {\r\n    const followedUser = data.user.followed.filter(follow => follow=== user.id.toString())\r\n    if (followedUser.length > 0) {\r\n      showAction=<Button  variant=\"contained\"color=\"secondary\" onClick={unfollowUser} >unFollow</Button>\r\n    }\r\n    else {\r\n       showAction=<Button variant=\"contained\" color=\"primary\"  onClick={followUser} >Follow</Button>\r\n    }\r\n  }\r\n  return(<>\r\n     <Grid container style={{ marginTop: \"20px\" }} >\r\n            <Grid item sm={4}></Grid>\r\n      <Grid item sm={6}>\r\n        {\r\n          user.id!==id ? showAction:null\r\n        }\r\n           </Grid>\r\n                  <Grid item sm={2}></Grid>\r\n            </Grid>\r\n      \r\n      <Grid container style={{ marginTop: \"20px\" }} >\r\n            <Grid item sm={4}></Grid>\r\n      {data && <Grid item sm={6}><Post posts={data.user} me={isme} deletePost={handleDelete }/></Grid>}\r\n                  <Grid item sm={2}></Grid>\r\n            </Grid>\r\n   </> )\r\n}\r\n","export const local = (user) => {\r\n    localStorage.removeItem(\"user\")\r\n    localStorage.setItem(\"user\",JSON.stringify (user))\r\n}\r\n","import {useContext} from \"react\"\r\nimport { TextField, Card, CardContent, CardActions, Button, Typography } from \"@material-ui/core\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {local} from \"../utils/localStorage\"\r\nimport {gql,useMutation} from \"@apollo/client\"\r\n import {Alert} from \"@material-ui/lab\"\r\nimport {context} from \"../App\"\r\nimport { Controller, useForm } from \"react-hook-form\"\r\nconst SignInMutation = gql`\r\nmutation($email:String!,$password:String!){\r\n    signIn(email:$email,password:$password){\r\n        name,token,id\r\n    }\r\n}\r\n`\r\nexport default function SignIn() {\r\n    const methods = useForm()\r\n    const history = useHistory()\r\n    const { control, handleSubmit,reset } = methods\r\n    const { dispatch } = useContext(context)\r\n    const [signIn, { error }] = useMutation(SignInMutation, {\r\n        errorPolicy: \"all\", onCompleted(data) {\r\n            local(data.signIn)\r\n            const loc = JSON.parse(localStorage.getItem(\"user\"))\r\n            dispatch({type:\"setlocal\",payload:loc})\r\n            history.push(`/home/${data.signIn.id}`)\r\n              \r\n        }\r\n    })\r\n \r\n    const onsubmit = val => {\r\n        signIn({ variables: {...val } })\r\n        reset()\r\n    }\r\n   \r\n    return (\r\n        <Card style={{margin:\"10px\"}} elevation={4} >\r\n            <Typography color=\"textSecondary\" style={{ textAlign: \"center\", marginTop: \"10px\" }}>SignIn</Typography>\r\n             {error && <Alert>{error.graphQLErrors.map(({message}, i) => (\r\n            <span key={i}>{message}</span> ))}</Alert>}\r\n            <CardContent>\r\n            <form  onSubmit={handleSubmit(onsubmit)}>\r\n            <div style={{margin:\"10px\"}}>\r\n             <Controller as={TextField }name=\"email\" label=\"Email\" variant=\"outlined\" control={control} defaultValue=\"\" required />     \r\n                   </div>\r\n                    <div style={{margin:\"10px\"}}>\r\n                        <Controller as={TextField} name=\"password\" label=\"Password\" variant=\"outlined\" type=\"password\" control={control}  defaultValue=\"\"required />\r\n                          </div>\r\n                     <CardActions>\r\n                <Button type=\"submit\" >login</Button>\r\n                        <Button onClick={()=>dispatch({type:\"SignUp\",payload:true})}>SignUp</Button>\r\n                        </CardActions>\r\n                    </form>\r\n            \r\n                </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n","import {useContext} from \"react\"\r\nimport { TextField, Card, CardContent, CardActions, Button, Typography} from \"@material-ui/core\"\r\nimport { gql, useMutation } from \"@apollo/client\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport { Alert } from \"@material-ui/lab\"\r\nimport {local} from \"../utils/localStorage\"\r\nimport {context} from \"../App\"\r\nimport{Controller,useForm} from \"react-hook-form\"\r\nimport SignIn from \"./SignIn\"\r\nconst SignUpMutation = gql`\r\nmutation($name:String!,$email:String!,$password:String!){\r\n    signUp(name:$name,email:$email,password:$password){\r\n        name,token,id\r\n    }\r\n}\r\n`\r\nexport default function SignUp() {\r\n    const methods = useForm()\r\n    const history = useHistory()\r\n    const loc = JSON.parse(localStorage.getItem(\"user\"))\r\n    console.log(loc)\r\n    if (loc) {\r\n        history.push(`home/${loc.id}`)\r\n    }\r\n    const { state, dispatch } = useContext(context)\r\n    const [signUp, {  error }] = useMutation(SignUpMutation, {\r\n        errorPolicy: \"all\", onCompleted(data) {\r\n            local(data.signUp)\r\n            const loc = JSON.parse(localStorage.getItem(\"user\"))\r\n            dispatch({type:\"setlocal\",payload:loc})\r\n            history.push(`/home/${data.signUp.id}`)\r\n         \r\n    }})\r\n    const { control, handleSubmit,reset } = methods\r\n    \r\n    const { SignUp }=state\r\n    const onsubmit = val => {\r\n        signUp({ variables: { ...val } })\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <>\r\n             <div className=\"app\">\r\n              <div className=\"pic\" style={{flexGrow:\"1\"}}>\r\n                welcome\r\n             </div>\r\n                <div className=\"signupform\">\r\n                </div>\r\n                  {SignUp === true ? (<Card style={{ margin: \"10px\" }} elevation={4}>\r\n                <Typography color=\"textSecondary\" style={{ textAlign: \"center\", marginTop: \"10px\" }}>SignUp form</Typography>\r\n                {error && <Alert>{error.graphQLErrors.map(({message}, i) => (\r\n                     <span key={i}>{message}</span> ))}</Alert>}\r\n                <CardContent>\r\n                    <form onSubmit={handleSubmit(onsubmit)}>\r\n                        <div style={{ margin: \"10px\" }}>\r\n                            <Controller as={TextField} name=\"name\" label=\"Name\" variant=\"outlined\" control={control} defaultValue=\"\" required />\r\n                        </div>\r\n                        <div style={{ margin: \"10px\" }}>\r\n                            <Controller as={TextField} name=\"email\" label=\"Email\" variant=\"outlined\" control={control} defaultValue=\"\" required />\r\n                        </div>\r\n                        <div style={{ margin: \"10px\" }}>\r\n                            <Controller as={TextField} name=\"password\" label=\"Password\" variant=\"outlined\" type=\"password\" control={control} defaultValue=\"\" required />\r\n                        </div>\r\n                        <CardActions>\r\n                            <Button onClick={() => dispatch({ type: \"SignUp\", payload: false })}>login</Button>\r\n                            <Button type=\"submit\">SignUp</Button>\r\n                        </CardActions>\r\n                    </form>\r\n            \r\n                </CardContent>\r\n            </Card>) : <SignIn />}\r\n                </div>\r\n          \r\n        </>\r\n            \r\n   \r\n    )\r\n}\r\n","import Home from \"../components/home\"\r\nimport Profile from \"../components/profile\"\r\nimport Signup from \"../components/SignUp\"\r\nimport { Route, Switch } from \"react-router-dom\"\r\nexport default function Headers() {\r\n    return (\r\n        <Switch>\r\n        <Route exact path='/' component={Signup}/>\r\n        <Route exact path='/home/:id' component={Home}/>\r\n        <Route exact path='/profile/:id' component={Profile}/>\r\n                \r\n</Switch>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {useHistory} from \"react-router-dom\"\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function SimpleList({items,onclick}) {\r\n    const classes = useStyles();\r\n    const history=useHistory()\r\n  let renderedList;\r\n  const onsubmit = () => {\r\n    onclick(\"\")\r\n  }\r\n    if (items) { \r\n        console.log(items)\r\n        if (items.search.length > 0) {\r\n            renderedList = items.search.map((item, index) => {\r\n              return (\r\n                <ListItem button key={index} onClick={() => { history.push(`/profile/${item.id}`); onsubmit() }}>\r\n                        <ListItemText primary={item.name} />\r\n        </ListItem>\r\n                \r\n            )\r\n        })\r\n        }\r\n     }\r\n  return (\r\n    <div className={classes.root} style={{marginTop:\"10px\"}}>\r\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n       {renderedList}\r\n      \r\n      </List>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import {useContext} from \"react\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport { gql, useMutation } from \"@apollo/client\"\r\nimport { useHistory, } from \"react-router-dom\"\r\nimport {context} from \"../App\"\r\n\r\n    const mutation =gql `\r\nmutation($id:ID!){\r\n    signOut(id:$id){\r\n        id\r\n    }\r\n}\r\n\r\n`\r\nexport default function SignOut(id) {\r\n    const history = useHistory()\r\n    const userId = id.id\r\n    const {dispatch}=useContext(context)\r\n    const [sigOut] = useMutation(mutation, {\r\n        onCompleted(data){\r\n            if (data) {\r\n                deleteLocal()\r\n        }\r\n            \r\n        }\r\n    })\r\n     const deleteLocal = () => {\r\n        localStorage.removeItem(\"user\")\r\n         const loc = localStorage.getItem(\"user\")\r\n         if (!loc) {\r\n             history.push(\"/\")\r\n            dispatch({type:\"setlocal\",payload:\"\"})\r\n            \r\n        }\r\n    }\r\n    const signout = () => {\r\n       sigOut({variables:{id:userId}})\r\n    }\r\n    return (\r\n        <Button onClick={signout}>Signout</Button>\r\n    )\r\n}\r\n","import {useEffect,useState} from \"react\"\r\nimport { InputBase, Grid,} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\"\r\nimport List from \"./List\"\r\nimport SignOut from \"./Signout\"\r\nimport { gql,useLazyQuery } from \"@apollo/client\"\r\nexport const getdata = gql`{\r\n  posts{\r\n    post createdAt id user{\r\n      name,id \r\n    }\r\n    comments{\r\n        comment createdAt user{\r\n          name id\r\n        }\r\n      }\r\n       likes{\r\n      owner\r\n    }\r\n  }\r\n}`\r\nconst SearchQuery = gql`\r\nquery($name:String!){\r\n search(name:$name){\r\n  name id \r\n}\r\n}\r\n`\r\n\r\nexport default function Home() {\r\n  const[term,setTerm]=useState(\"\")\r\n  const [search, res] = useLazyQuery(SearchQuery)\r\n    const loc = JSON.parse(localStorage.getItem(\"user\"))\r\n  useEffect(() => {\r\n    const timeId = setTimeout(() => {\r\n      if (term) {\r\n        search({ variables: { name: term } }) \r\n      \r\n      } \r\n   },800)\r\n     \r\n    return () => {\r\n     clearTimeout(timeId)\r\n   }\r\n   \r\n    \r\n  }, [term, search])\r\n  const onsubmit = (val) => {\r\n       setTerm(val)\r\n     }\r\n    return (\r\n        <>\r\n            {loc && <Grid container style={{ width: \"100%\" }} className=\"list\">\r\n                <Grid item xs={12} sm={4}>\r\n                    <div>{loc.name}</div>\r\n                </Grid>\r\n               \r\n                <Grid item xs={12} sm={4}>\r\n                    <div><InputBase variant=\"outlined\" size=\"small\"\r\n                        placeholder=\" Search…\" onChange={(e) => setTerm(e.target.value)}\r\n                        value={term} />\r\n                        {term &&  <List items={res.data} onclick={onsubmit} />} \r\n            \r\n                    </div>\r\n                </Grid>\r\n                <Grid item sm={2}></Grid>\r\n                <Grid item xs={12} sm={2}  >\r\n            <Link to={`/profile/${loc.id}`}>Profile</Link>\r\n            <SignOut id={ loc.id}/>\r\n                </Grid>\r\n            </Grid>}\r\n            \r\n        \r\n            </>\r\n    )\r\n}\r\n","import { ApolloClient, ApolloProvider, ApolloLink, InMemoryCache } from \"@apollo/client\"\r\nimport {createUploadLink} from \"apollo-upload-client\"\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { useReducer, createContext } from \"react\"\r\nimport { BrowserRouter} from \"react-router-dom\"\r\nimport Header from \"./utils/headers\"\r\nimport Top from \"./components/header\"\r\nimport { CssBaseline, Container ,StylesProvider} from \"@material-ui/core\"\r\nimport \"./styles/app.scss\"\r\nconst uploadlink = createUploadLink({ uri:\"/graphql\" })\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token =JSON.parse(localStorage.getItem(\"user\"))\r\n \r\n  return { headers: { ...headers, authorization: token ? `Bearer ${token.token}` : \"\", } }\r\n})\r\nconst client = new ApolloClient({ link:ApolloLink.from([authLink,uploadlink]), cache: new InMemoryCache() })\r\nconst reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"SignUp\":\r\n      return { ...state, SignUp: action.payload }\r\n    case \"SignIn\":\r\n      return { ...state, isSignIn: true, user: action.payload }\r\n    case \"setlocal\":\r\n      return{...state,loc:action.payload}\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport const context=createContext({})\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, { SignUp: true, isSignIn: false, user: {}, loc: {} })\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <context.Provider value={{ state, dispatch }}> \r\n          <StylesProvider injectFirst>\r\n          <CssBaseline>\r\n            <Container >       \r\n              <BrowserRouter >\r\n                  <Top />\r\n                 <Header/>\r\n              </BrowserRouter>\r\n          </Container>\r\n          </CssBaseline>\r\n          </StylesProvider>\r\n       </context.Provider> \r\n      </ApolloProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n","\r\nimport { render } from \"react-dom\"\r\nimport App from \"./App\"\r\nrender(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}